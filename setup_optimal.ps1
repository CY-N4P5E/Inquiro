# Optimal Inquiro Setup for Windows
# Hardware: 13900HX + 16GB RAM + RTX 4060 8GB
# This script sets up optimal configuration for your specific hardware

Write-Host "=" -NoNewline -ForegroundColor Cyan
Write-Host ("=" * 79) -ForegroundColor Cyan
Write-Host "üîß INQUIRO OPTIMAL SETUP - Windows PowerShell Configuration" -ForegroundColor Yellow
Write-Host "=" -NoNewline -ForegroundColor Cyan
Write-Host ("=" * 79) -ForegroundColor Cyan
Write-Host ""

Write-Host "üñ•Ô∏è  Detected Hardware Profile:" -ForegroundColor Green
Write-Host "   CPU: Intel Core i9-13900HX" -ForegroundColor White
Write-Host "   RAM: 16GB" -ForegroundColor White
Write-Host "   GPU: RTX 4060 8GB VRAM" -ForegroundColor White
Write-Host ""

# Optimal configuration values
$config = @{
    'DEFAULT_MEMORY_LIMIT' = '11000'
    'CHUNK_SIZE' = '800'
    'CHUNK_OVERLAP' = '80'
    'DEFAULT_K' = '7'
    'DEFAULT_SCORE_THRESHOLD' = '0.4'
    'DEFAULT_MAX_CONTEXT_LENGTH' = '6000'
    'OLLAMA_QUERY_MODEL' = 'llama3.1:8b'
    'OLLAMA_EMBEDDING_MODEL' = 'nomic-embed-text'
}

Write-Host "‚öôÔ∏è  Setting optimal configuration..." -ForegroundColor Green

# Set environment variables for current session
foreach ($key in $config.Keys) {
    $value = $config[$key]
    Set-Item -Path "env:$key" -Value $value
    Write-Host "   ‚úì $key = $value" -ForegroundColor White
}

Write-Host ""
Write-Host "‚úÖ Configuration applied to current PowerShell session!" -ForegroundColor Green

# Ask user if they want to make changes permanent
Write-Host ""
$makePermanent = Read-Host "Make these settings permanent for your user account? [Y/n]"

if ($makePermanent -eq "" -or $makePermanent -eq "Y" -or $makePermanent -eq "y" -or $makePermanent -eq "Yes" -or $makePermanent -eq "yes") {
    Write-Host ""
    Write-Host "üìù Setting permanent environment variables..." -ForegroundColor Green
    
    foreach ($key in $config.Keys) {
        $value = $config[$key]
        try {
            [Environment]::SetEnvironmentVariable($key, $value, "User")
            Write-Host "   ‚úì $key permanently set" -ForegroundColor White
        } catch {
            Write-Host "   ‚ùå Failed to set $key permanently" -ForegroundColor Red
        }
    }
    
    Write-Host ""
    Write-Host "‚úÖ Permanent environment variables set!" -ForegroundColor Green
    Write-Host "   Note: You may need to restart PowerShell/applications to see changes" -ForegroundColor Yellow
}

# Create .env file
Write-Host ""
Write-Host "üìÑ Creating .env file..." -ForegroundColor Green

$envContent = @"
# Optimal Inquiro configuration for 13900HX + 16GB RAM + RTX 4060 8GB
# Generated by setup_optimal.ps1

# Memory Management - 11GB limit (leaving 5GB for OS and other apps)
DEFAULT_MEMORY_LIMIT=11000

# Text Processing - balanced for quality and performance
CHUNK_SIZE=800
CHUNK_OVERLAP=80

# Query Settings - optimized for quality
DEFAULT_K=7
DEFAULT_SCORE_THRESHOLD=0.4
DEFAULT_MAX_CONTEXT_LENGTH=6000

# Models - optimized for 8GB VRAM
OLLAMA_QUERY_MODEL=llama3.1:8b
OLLAMA_EMBEDDING_MODEL=nomic-embed-text
"@

try {
    $envContent | Out-File -FilePath ".env" -Encoding UTF8
    Write-Host "   ‚úì .env file created successfully" -ForegroundColor White
} catch {
    Write-Host "   ‚ùå Failed to create .env file: $_" -ForegroundColor Red
}

# Check Ollama
Write-Host ""
Write-Host "ü§ñ Checking Ollama installation..." -ForegroundColor Green

try {
    $ollamaList = & ollama list 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "   ‚úì Ollama is installed and running" -ForegroundColor White
        
        # Check for required models
        $queryModel = $config['OLLAMA_QUERY_MODEL']
        $embeddingModel = $config['OLLAMA_EMBEDDING_MODEL']
        
        $missingModels = @()
        
        if ($ollamaList -notlike "*$queryModel*") {
            $missingModels += $queryModel
        } else {
            Write-Host "   ‚úì Query model '$queryModel' is available" -ForegroundColor White
        }
        
        if ($ollamaList -notlike "*$embeddingModel*") {
            $missingModels += $embeddingModel
        } else {
            Write-Host "   ‚úì Embedding model '$embeddingModel' is available" -ForegroundColor White
        }
        
        if ($missingModels.Count -gt 0) {
            Write-Host ""
            Write-Host "üì• Missing models detected: $($missingModels -join ', ')" -ForegroundColor Yellow
            $installModels = Read-Host "Install missing models now? [Y/n]"
            
            if ($installModels -eq "" -or $installModels -eq "Y" -or $installModels -eq "y" -or $installModels -eq "Yes" -or $installModels -eq "yes") {
                foreach ($model in $missingModels) {
                    Write-Host "   Installing $model..." -ForegroundColor Yellow
                    try {
                        & ollama pull $model
                        if ($LASTEXITCODE -eq 0) {
                            Write-Host "   ‚úì $model installed successfully" -ForegroundColor White
                        } else {
                            Write-Host "   ‚ùå Failed to install $model" -ForegroundColor Red
                        }
                    } catch {
                        Write-Host "   ‚ùå Error installing $model`: $_" -ForegroundColor Red
                    }
                }
            } else {
                Write-Host "   ‚ö†Ô∏è  You'll need to install these models manually later:" -ForegroundColor Yellow
                foreach ($model in $missingModels) {
                    Write-Host "      ollama pull $model" -ForegroundColor White
                }
            }
        }
    } else {
        Write-Host "   ‚ùå Ollama is not running or not accessible" -ForegroundColor Red
        Write-Host "   Please start Ollama and run this script again" -ForegroundColor Yellow
    }
} catch {
    Write-Host "   ‚ùå Ollama is not installed" -ForegroundColor Red
    Write-Host "   Please install Ollama from https://ollama.ai" -ForegroundColor Yellow
}

# Run Python configuration if available
Write-Host ""
Write-Host "‚öôÔ∏è  Running Inquiro configuration..." -ForegroundColor Green

try {
    $pythonConfig = & python core/config.py 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "   ‚úÖ Inquiro configuration completed successfully" -ForegroundColor Green
    } else {
        Write-Host "   ‚ö†Ô∏è  Configuration completed with warnings" -ForegroundColor Yellow
        Write-Host "   Output: $pythonConfig" -ForegroundColor Gray
    }
} catch {
    Write-Host "   ‚ùå Failed to run configuration: $_" -ForegroundColor Red
    Write-Host "   You can run it manually with: python core/config.py" -ForegroundColor Yellow
}

# Show next steps
Write-Host ""
Write-Host "üéâ Setup complete! Next steps:" -ForegroundColor Green
Write-Host ""
Write-Host "1. **Start using Inquiro:**" -ForegroundColor Yellow
Write-Host "   python inquiro_cli.py --help" -ForegroundColor White
Write-Host ""
Write-Host "2. **Ingest your first documents:**" -ForegroundColor Yellow
Write-Host "   python inquiro_cli.py populate --path `"C:\path\to\your\documents`"" -ForegroundColor White
Write-Host ""
Write-Host "3. **Query your documents:**" -ForegroundColor Yellow
Write-Host "   python inquiro_cli.py query `"Your question here`"" -ForegroundColor White
Write-Host ""
Write-Host "4. **Use the TUI interface:**" -ForegroundColor Yellow
Write-Host "   python inquiro_tui.py" -ForegroundColor White
Write-Host ""
Write-Host "üìñ For detailed configuration options, see OPTIMAL_CONFIG.md" -ForegroundColor Cyan
Write-Host "üîß To modify settings, edit the .env file or environment variables" -ForegroundColor Cyan
Write-Host ""
Write-Host "=" -NoNewline -ForegroundColor Cyan
Write-Host ("=" * 79) -ForegroundColor Cyan
